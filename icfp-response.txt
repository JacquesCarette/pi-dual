
We thank the reviewers for their detailed comments.

Review A
--------

Regarding the construction of iso_f, the writing is a bit confusing. In fact,
the *construction* of iso_f does not depend on the heap having any particular
values: the construction only depends on the structure of f. We will clarify
this point which is explained in detail in our POPL'12 paper.

About impact: Our belief is that negative/fractional types have the benefits
of continuations without some of their complications, and that they can
potentially be useful for organizing concurrent systems. We did not want to
speculate about this too much so you are right that it is premature to argue
that everybody needs negative and fractional types *now*.

Review B
--------

The reviewer's concern that the compact closed structure collapses
into a trivial category stems from the construction of b <-> 0
morphisms through the use of division by 0.

In our system there are no objects of form b/0. While we had
explicitely stated this in the text of our paper, it appears that we
have may have lost mention of this in the editing process. We
apologize for this and thank the reviewer for bringing our attention
to this.

That said, the fact that b/0 objects are not allowed is implicit in
the paper:

  (1) We discus the computational model presented here as computation
      in the field of rationals. Field axioms explicitely disallow
      division by zero.

  (2) This also manifests in our semantics. The type 0 is not to be
      confused with values of type 0 -- there are no values of type
      0. In our setting, the only way one may attempt to create an
      object b/0 (i.e. get 0 in the denominator) is by using eta/eps
      at the type 0 (i.e. the isomorphism "1 <-> 0*1/0"). A combinator
      correpsonding to this isomorphic type can never be executed as
      there are no values of type 0.

In this sense, it is not neccessary to eliminate 0 objects by limiting
the monoid (0, +) to being traced as opposed to being compact
closed. As independant research question however, it would interesting
to study what aspects of the (1, *) is preserved by an Int
construction over the additive trace.

It is true that field-like categories, namely ones with two compact
closed structures with distributivity of tensors, are non-standard and
not well known.  We however suspect that these categories are common
and pervasive. For instance, preliminary investigations suggest that
finite dimensional Hilbert spaces, which are usually presented as
compact closed categories with biproducts, may also be presented as
field-like categories discussed here.

Review C 
--------

We are happy that the paper appears exciting and conveys some sense of beauty
but we sincerely apologize that the intuition is not there yet. The reviewer
should not be blamed: this is entirely our fault. The diagrams, examples, and
the introduction were supposed to help but it seems that we need to think
much harder about how to communicate this material.

We also agree that it is premature to argue that "every programmer" should
know about negative/fractional types (as mentioned in the response to Review
A) but we can dream :-)

Review D
--------

As mentioned in our response to Review B, the categorical structure that
corresponds to a field is a topic of current research by others. In other
words, there is no known categorical semantics for something like
Pi^\eta\epsilon. For each of the dagger compact closed fragments separately
(i.e., for each of the monoids (*,1) with inverse / and (+,0) with inverse
-), our semantics does correspond to the categorical one. (This is shown in
the POPL'12 paper, the RC'11 paper, and is to be presented in full detail in
James's thesis (forthcoming, June 2012).

The relation to "Galois connections" is interesting but might need some
thinking: the first "iteration" of the Galois connection loses information
and this might be a problem in our setting.



