
We thank the reviewers for their detailed comments.

Review A
--------

Regarding the construction of iso_f, the writing is a bit confusing. In fact,
the *construction* of iso_f does not depend on the heap having any particular
values: the construction only depends on the structure of f. We will clarify
this point which is explained in detail in our POPL'12 paper.

About impact: Our belief is that negative/fractional types have the benefits
of continuations without some of their complications, and that they can
potentially be useful for organizing concurrent systems. We did not want to
speculate about this too much so you are right that it is premature to argue
that everybody needs negative and fractional types *now*.

Review B
--------

The review points to a very deep issue regarding the categorical semantics of
\Pi^\eta\epsilon. But first let us clarify a misunderstanding (that is
entirely our fault).

Misunderstanding: After showing that the categorical structure collapses to a
trivial one if one allows fractional types X/0, the reviewer poses a
question:

> (By the way, I do not understand the analogy with the field of rational
> numbers, because of the presence of the fractional types X/0.)

This is precisely the point. The category we want to live in is the
categorification of the field of rational numbers! Now it is true that this
fact is not stated as clearly as it should, but we do repeat several times
that we are in an algebraic structure that is a field, and hence, we admit,
implicitly, that multiplicative inverses exist only for non-zero
elements. Moreover, since we clearly state that there are no values of type
0, the abstract machine semantics (which is the only semantics we have), can
never produce anything of type 0 or 1/0. So even if one tried to use the
isomorphisms eta/epsilon at type 0, i.e, if one tried to map between "1 <-> 0
* 1/0", the corresponding combinator could be never be executed as there are
no values of type 0.

Having said all of that, the reviewer is still pointing to something deep
regarding the categorical model of \Pi^\eta\epsilon. As mentioned above, the
categorical structure we want would be the categorification of the field of
rational numbers. It is unlikely that anything "conventional" is going to
work here. There has been some work on such categorical structures, see for
example:

 * From Finite Sets to Feynman Diagrams, John C. Baez and James Dolan
 * Knot Theory And Categorification, Dave de Jonge, Master's Thesis

We believe this to be a very interesting technical problem but one we are not
attempting to solve (nor quite honestly are we qualified to solve at this
point). What we are presenting however is a operational (syntactic) semantics
for such a language. 

Review C 
--------

We are happy that the paper appears exciting and conveys some sense of beauty
but we sincerely apologize that the intuition is not there yet. The reviewer
should not be blamed: this is entirely our fault. The diagrams, examples, and
the introduction were supposed to help but it seems that we need to think
much harder about how to communicate this material.

We also agree that it is premature to argue that "every programmer" should
know about negative/fractional types (as mentioned in the response to Review
A) but we can dream :-)

Review D
--------

As mentioned in our response to Review B, the categorical structure that
corresponds to a field is a topic of current research by others. In other
words, there is no known categorical semantics for something like
Pi^\eta\epsilon. For each of the dagger compact closed fragments separately
(i.e., for each of the monoids (*,1) with inverse / and (+,0) with inverse
-), our semantics does correspond to the categorical one. (This is shown in
the POPL'12 paper, the RC'11 paper, and is to be presented in full detail in
James's thesis (forthcoming, June 2012). For the full language, we only have
the semantics based on the abstract machine. 

The relation to "Galois connections" is interesting but might need some
thinking: the first "iteration" of the Galois connection loses information
and this might be a problem in our setting.



