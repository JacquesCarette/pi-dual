{-# OPTIONS --without-K --safe #-}

-- Backwards evaluator and the fact that with eval, forms a reversible evaluator

module BackwardsEval where

open import Data.Unit using (tt)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst)

open import Singleton
open import PiFrac

bwd : {A B : ùïå} ‚Üí (A ‚ü∑ B) ‚Üí ‚ü¶ B ‚üß ‚Üí ‚ü¶ A ‚üß
bwd-eval : {A B : ùïå} ‚Üí (c : A ‚ü∑ B) ‚Üí (v : ‚ü¶ A ‚üß) ‚Üí bwd c (eval c v) ‚â° v

bwd unite‚Çäl v = inj‚ÇÇ v
bwd uniti‚Çäl (inj‚ÇÇ v) = v
bwd unite‚Çär v = inj‚ÇÅ v
bwd uniti‚Çär (inj‚ÇÅ v) = v
bwd swap‚Çä (inj‚ÇÅ v) = inj‚ÇÇ v
bwd swap‚Çä (inj‚ÇÇ v) = inj‚ÇÅ v
bwd assocl‚Çä (inj‚ÇÅ (inj‚ÇÅ v)) = inj‚ÇÅ v
bwd assocl‚Çä (inj‚ÇÅ (inj‚ÇÇ v)) = inj‚ÇÇ (inj‚ÇÅ v)
bwd assocl‚Çä (inj‚ÇÇ v) = inj‚ÇÇ (inj‚ÇÇ v)
bwd assocr‚Çä (inj‚ÇÅ v) = inj‚ÇÅ (inj‚ÇÅ v)
bwd assocr‚Çä (inj‚ÇÇ (inj‚ÇÅ v)) = inj‚ÇÅ (inj‚ÇÇ v)
bwd assocr‚Çä (inj‚ÇÇ (inj‚ÇÇ v)) = inj‚ÇÇ v
bwd unite‚ãÜl v = (tt , v)
bwd uniti‚ãÜl (tt , v) = v
bwd unite‚ãÜr v = (v , tt)
bwd uniti‚ãÜr (v , tt) = v
bwd swap‚ãÜ (v‚ÇÅ , v‚ÇÇ) = (v‚ÇÇ , v‚ÇÅ)
bwd assocl‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) = (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ))
bwd assocr‚ãÜ (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) = ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ)
bwd dist (inj‚ÇÅ (v‚ÇÅ , v‚ÇÇ)) = (inj‚ÇÅ v‚ÇÅ , v‚ÇÇ)
bwd dist (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)) = (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ)
bwd factor (inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) = inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ)
bwd factor (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) = inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)
bwd distl (inj‚ÇÅ (v‚ÇÅ , v‚ÇÇ)) = (v‚ÇÅ , inj‚ÇÅ v‚ÇÇ)
bwd distl (inj‚ÇÇ (v‚ÇÅ , v‚ÇÉ)) = (v‚ÇÅ , inj‚ÇÇ v‚ÇÉ)
bwd factorl (v‚ÇÅ , inj‚ÇÅ v‚ÇÇ) = inj‚ÇÅ (v‚ÇÅ , v‚ÇÇ)
bwd factorl (v‚ÇÅ , inj‚ÇÇ v‚ÇÉ) = inj‚ÇÇ (v‚ÇÅ , v‚ÇÉ)
bwd id‚ü∑ v = v
bwd (c‚ÇÅ ‚äö c‚ÇÇ) v = bwd c‚ÇÅ (bwd c‚ÇÇ v)
bwd (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ v) = inj‚ÇÅ (bwd c‚ÇÅ v)
bwd (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ v) = inj‚ÇÇ (bwd c‚ÇÇ v)
bwd (c‚ÇÅ ‚äó c‚ÇÇ) (v‚ÇÅ , v‚ÇÇ) = (bwd c‚ÇÅ v‚ÇÅ , bwd c‚ÇÇ v‚ÇÇ)
bwd (lift {_} {_} {v‚ÇÅ} c) (‚óè‚ÇÅ , v‚â°‚óè‚ÇÅ) = (bwd c ‚óè‚ÇÅ) , (trans (sym (bwd-eval c v‚ÇÅ)) (cong (bwd c) v‚â°‚óè‚ÇÅ))
bwd tensorl ((w‚ÇÅ , p‚ÇÅ) , (w‚ÇÇ , p‚ÇÇ)) = (w‚ÇÅ ,  w‚ÇÇ) , (cong‚ÇÇ _,_ p‚ÇÅ p‚ÇÇ)
bwd tensorr ((v‚ÇÅ , v‚ÇÇ) , p) = (v‚ÇÅ , cong proj‚ÇÅ p) , (v‚ÇÇ , cong proj‚ÇÇ p)
bwd plusl (w , p) = (inj‚ÇÅ w) , (cong inj‚ÇÅ p)
bwd plusr (w , p) = (inj‚ÇÇ w) , (cong inj‚ÇÇ p)
bwd (Œ∑ v) p = tt
bwd (Œµ v) tt = (v , refl) , Œª _ ‚Üí tt
bwd (== c eq) v = bwd c (subst (Singleton ‚ü¶ _ ‚üß) (sym eq) v)
bwd (focus v) (.v , refl) = tt
bwd unfocus v = v , {!!} 

bwd-eval unite‚Çäl (inj‚ÇÇ v) = refl
bwd-eval uniti‚Çäl v = refl
bwd-eval unite‚Çär (inj‚ÇÅ v) = refl
bwd-eval uniti‚Çär v = refl
bwd-eval swap‚Çä (inj‚ÇÅ v) = refl
bwd-eval swap‚Çä (inj‚ÇÇ v) = refl
bwd-eval assocl‚Çä (inj‚ÇÅ v) = refl
bwd-eval assocl‚Çä (inj‚ÇÇ (inj‚ÇÅ v)) = refl
bwd-eval assocl‚Çä (inj‚ÇÇ (inj‚ÇÇ v)) = refl
bwd-eval assocr‚Çä (inj‚ÇÅ (inj‚ÇÅ v)) = refl
bwd-eval assocr‚Çä (inj‚ÇÅ (inj‚ÇÇ v)) = refl
bwd-eval assocr‚Çä (inj‚ÇÇ v) = refl
bwd-eval unite‚ãÜl (tt , v) = refl
bwd-eval uniti‚ãÜl v = refl
bwd-eval unite‚ãÜr (v , tt) = refl
bwd-eval uniti‚ãÜr v = refl
bwd-eval swap‚ãÜ (v‚ÇÅ , v‚ÇÇ) = refl
bwd-eval assocl‚ãÜ (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) = refl
bwd-eval assocr‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) = refl
bwd-eval dist (inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) = refl
bwd-eval dist (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) = refl
bwd-eval factor (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ)) = refl
bwd-eval factor (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)) = refl
bwd-eval distl (v‚ÇÅ , inj‚ÇÅ v‚ÇÇ) = refl
bwd-eval distl (v‚ÇÅ , inj‚ÇÇ v‚ÇÉ) = refl
bwd-eval factorl (inj‚ÇÅ (v‚ÇÅ , v‚ÇÇ)) = refl
bwd-eval factorl (inj‚ÇÇ (v‚ÇÅ , v‚ÇÉ)) = refl
bwd-eval id‚ü∑ v = refl
bwd-eval (c‚ÇÅ ‚äö c‚ÇÇ) v = trans (cong (bwd c‚ÇÅ) (bwd-eval c‚ÇÇ (eval c‚ÇÅ v))) (bwd-eval c‚ÇÅ v)
bwd-eval (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ v‚ÇÅ) = cong inj‚ÇÅ (bwd-eval c‚ÇÅ v‚ÇÅ)
bwd-eval (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ v‚ÇÇ) = cong inj‚ÇÇ (bwd-eval c‚ÇÇ v‚ÇÇ)
bwd-eval (c‚ÇÅ ‚äó c‚ÇÇ) (v‚ÇÅ , v‚ÇÇ) = cong‚ÇÇ _,_ (bwd-eval c‚ÇÅ v‚ÇÅ) (bwd-eval c‚ÇÇ v‚ÇÇ)
bwd-eval (lift c) v = pointed-all-paths
bwd-eval tensorl p = pointed-all-paths
bwd-eval tensorr (p‚ÇÅ , p‚ÇÇ) = cong‚ÇÇ _,_ pointed-all-paths pointed-all-paths
bwd-eval plusl p = pointed-all-paths
bwd-eval plusr p = pointed-all-paths
bwd-eval (Œ∑ v) tt = refl
bwd-eval (Œµ v) (p , r) = cong‚ÇÇ _,_ pointed-all-paths refl
bwd-eval (== c eq) p = pointed-all-paths
bwd-eval (focus v) tt = {!!}
bwd-eval unfocus (v , refl) = {!!} 

eval-bwd : {A B : ùïå} ‚Üí (c : A ‚ü∑ B) ‚Üí (v : ‚ü¶ B ‚üß) ‚Üí eval c (bwd c v) ‚â° v
eval-bwd unite‚Çäl v = refl
eval-bwd uniti‚Çäl (inj‚ÇÇ v) = refl
eval-bwd unite‚Çär v = refl
eval-bwd uniti‚Çär (inj‚ÇÅ v) = refl
eval-bwd swap‚Çä (inj‚ÇÅ v) = refl
eval-bwd swap‚Çä (inj‚ÇÇ v) = refl
eval-bwd assocl‚Çä (inj‚ÇÅ (inj‚ÇÅ v)) = refl
eval-bwd assocl‚Çä (inj‚ÇÅ (inj‚ÇÇ v)) = refl
eval-bwd assocl‚Çä (inj‚ÇÇ v) = refl
eval-bwd assocr‚Çä (inj‚ÇÅ v) = refl
eval-bwd assocr‚Çä (inj‚ÇÇ (inj‚ÇÅ v)) = refl
eval-bwd assocr‚Çä (inj‚ÇÇ (inj‚ÇÇ v)) = refl
eval-bwd unite‚ãÜl v = refl
eval-bwd uniti‚ãÜl (tt , v) = refl
eval-bwd unite‚ãÜr v = refl
eval-bwd uniti‚ãÜr (v , tt) = refl
eval-bwd swap‚ãÜ (v‚ÇÇ , v‚ÇÅ) = refl
eval-bwd assocl‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) = refl
eval-bwd assocr‚ãÜ (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) = refl
eval-bwd dist (inj‚ÇÅ (v‚ÇÅ , v‚ÇÇ)) = refl
eval-bwd dist (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)) = refl
eval-bwd factor (inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) = refl
eval-bwd factor (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) = refl
eval-bwd distl (inj‚ÇÅ (v‚ÇÅ , v‚ÇÇ)) = refl
eval-bwd distl (inj‚ÇÇ (v‚ÇÅ , v‚ÇÉ)) = refl
eval-bwd factorl (v‚ÇÅ , inj‚ÇÅ v‚ÇÇ) = refl
eval-bwd factorl (v‚ÇÅ , inj‚ÇÇ v‚ÇÉ) = refl
eval-bwd id‚ü∑ v = refl
eval-bwd (c‚ÇÅ ‚äö c‚ÇÇ) v = trans (cong (eval c‚ÇÇ) (eval-bwd c‚ÇÅ (bwd c‚ÇÇ v))) (eval-bwd c‚ÇÇ v)
eval-bwd (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ v) = cong inj‚ÇÅ (eval-bwd c‚ÇÅ v)
eval-bwd (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ v) = cong inj‚ÇÇ (eval-bwd c‚ÇÇ v)
eval-bwd (c‚ÇÅ ‚äó c‚ÇÇ) (v‚ÇÉ , v‚ÇÑ) = cong‚ÇÇ _,_ (eval-bwd c‚ÇÅ v‚ÇÉ) (eval-bwd c‚ÇÇ v‚ÇÑ)
eval-bwd (lift c) x = pointed-all-paths
eval-bwd tensorl p = cong‚ÇÇ _,_ pointed-all-paths pointed-all-paths
eval-bwd tensorr p = pointed-all-paths
eval-bwd plusl p = pointed-all-paths
eval-bwd plusr p = pointed-all-paths
eval-bwd (Œ∑ v) (p , r) = cong‚ÇÇ _,_ pointed-all-paths refl
eval-bwd (Œµ v) tt = refl
eval-bwd (== c eq) p = pointed-all-paths
eval-bwd (focus v) (v , refl) = {!!}
eval-bwd unfocus v = {!!} 
