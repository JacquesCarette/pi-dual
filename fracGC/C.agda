{-# OPTIONS --without-K --safe #-}

module C where

open import Data.Empty
open import Data.Unit
open import Data.Sum
open import Data.Product
open import Relation.Binary.PropositionalEquality

open import Singleton

infixr 70 _รแตค_
infixr 60 _+แตคโ_
infixr 60 _+แตคแตฃ_
infixr 50 _โ_

------------------------------------------------------------------------------
-- Pi

data ๐ : Set
โฆ_โง : ๐ โ ฮฃ[ A โ Set ] A
data _โท_ : ๐ โ ๐ โ Set

data ๐ where
  ๐       : ๐
  _+แตคโ_    : ๐ โ ๐ โ ๐
  _+แตคแตฃ_    : ๐ โ ๐ โ ๐
  _รแตค_    : ๐ โ ๐ โ ๐
  Singแตค : ๐ โ ๐
  Recipแตค : ๐ โ ๐

โฆ ๐ โง = โค , tt
โฆ Tโ รแตค Tโ โง = zip _ร_ _,_ โฆ Tโ โง โฆ Tโ โง
โฆ Tโ +แตคโ Tโ โง = zip _โ_ (ฮป x _ โ injโ x) โฆ Tโ โง โฆ Tโ โง
โฆ Tโ +แตคแตฃ Tโ โง = zip _โ_ (ฮป _ y โ injโ y) โฆ Tโ โง โฆ Tโ โง
โฆ Singแตค T โง = < uncurry Singleton , (ฮป y โ projโ y , refl) > โฆ T โง
โฆ Recipแตค T โง = < uncurry Recip , (ฮป _ _ โ tt) > โฆ T โง

data _โท_ where
  swapโโ   : {tโ tโ : ๐} โ tโ +แตคโ tโ โท tโ +แตคแตฃ tโ
  swapโโ   : {tโ tโ : ๐} โ tโ +แตคแตฃ tโ โท tโ +แตคโ tโ
  assoclโโ : {tโ tโ tโ : ๐} โ tโ +แตคโ (tโ +แตคโ tโ) โท (tโ +แตคโ tโ) +แตคโ tโ
  assoclโโ : {tโ tโ tโ : ๐} โ tโ +แตคโ (tโ +แตคแตฃ tโ) โท (tโ +แตคโ tโ) +แตคโ tโ
  assoclโโ : {tโ tโ tโ : ๐} โ tโ +แตคแตฃ (tโ +แตคโ tโ) โท (tโ +แตคแตฃ tโ) +แตคโ tโ
  assoclโโ : {tโ tโ tโ : ๐} โ tโ +แตคแตฃ (tโ +แตคแตฃ tโ) โท (tโ +แตคโ tโ) +แตคแตฃ tโ
  assoclโโ : {tโ tโ tโ : ๐} โ tโ +แตคแตฃ (tโ +แตคแตฃ tโ) โท (tโ +แตคแตฃ tโ) +แตคแตฃ tโ
  assocrโโ : {tโ tโ tโ : ๐} โ (tโ +แตคโ tโ) +แตคโ tโ โท tโ +แตคโ (tโ +แตคแตฃ tโ)
  assocrโโ : {tโ tโ tโ : ๐} โ (tโ +แตคโ tโ) +แตคโ tโ โท tโ +แตคโ (tโ +แตคโ tโ)
  assocrโโ : {tโ tโ tโ : ๐} โ (tโ +แตคแตฃ tโ) +แตคโ tโ โท tโ +แตคแตฃ (tโ +แตคโ tโ)
  assocrโโ : {tโ tโ tโ : ๐} โ (tโ +แตคโ tโ) +แตคแตฃ tโ โท tโ +แตคแตฃ (tโ +แตคแตฃ tโ)
  assocrโโ : {tโ tโ tโ : ๐} โ (tโ +แตคแตฃ tโ) +แตคแตฃ tโ โท tโ +แตคแตฃ (tโ +แตคแตฃ tโ)
  uniteโl : {t : ๐} โ ๐ รแตค t โท t
  unitiโl : {t : ๐} โ t โท ๐ รแตค t
  uniteโr : {t : ๐} โ t รแตค ๐ โท t
  unitiโr : {t : ๐} โ t โท t รแตค ๐
  swapโ   : {tโ tโ : ๐} โ tโ รแตค tโ โท tโ รแตค tโ
  assoclโ : {tโ tโ tโ : ๐} โ tโ รแตค (tโ รแตค tโ) โท (tโ รแตค tโ) รแตค tโ
  assocrโ : {tโ tโ tโ : ๐} โ (tโ รแตค tโ) รแตค tโ โท tโ รแตค (tโ รแตค tโ)
  distโ    : {tโ tโ tโ : ๐} โ (tโ +แตคโ tโ) รแตค tโ โท (tโ รแตค tโ) +แตคโ (tโ รแตค tโ)
  distโ    : {tโ tโ tโ : ๐} โ (tโ +แตคแตฃ tโ) รแตค tโ โท (tโ รแตค tโ) +แตคแตฃ (tโ รแตค tโ)
  factorโ  : {tโ tโ tโ : ๐} โ (tโ รแตค tโ) +แตคโ (tโ รแตค tโ) โท (tโ +แตคโ tโ) รแตค tโ
  factorโ  : {tโ tโ tโ : ๐} โ (tโ รแตค tโ) +แตคแตฃ (tโ รแตค tโ) โท (tโ +แตคแตฃ tโ) รแตค tโ
  distlโ   : {tโ tโ tโ : ๐} โ tโ รแตค (tโ +แตคโ tโ) โท (tโ รแตค tโ) +แตคโ (tโ รแตค tโ)
  distlโ   : {tโ tโ tโ : ๐} โ tโ รแตค (tโ +แตคแตฃ tโ) โท (tโ รแตค tโ) +แตคแตฃ (tโ รแตค tโ)
  factorlโ : {tโ tโ tโ : ๐ } โ (tโ รแตค tโ) +แตคโ (tโ รแตค tโ) โท tโ รแตค (tโ +แตคโ tโ)
  factorlโ : {tโ tโ tโ : ๐ } โ (tโ รแตค tโ) +แตคแตฃ (tโ รแตค tโ) โท tโ รแตค (tโ +แตคแตฃ tโ)
  idโท     : {t : ๐} โ t โท t
  _โ_     : {tโ tโ tโ : ๐} โ (tโ โท tโ) โ (tโ โท tโ) โ (tโ โท tโ)
  _โโ_     : {tโ tโ tโ tโ : ๐} โ (tโ โท tโ) โ (tโ โท tโ) โ (tโ +แตคโ tโ โท tโ +แตคโ tโ)
  _โโ_     : {tโ tโ tโ tโ : ๐} โ (tโ โท tโ) โ (tโ โท tโ) โ (tโ +แตคแตฃ tโ โท tโ +แตคแตฃ tโ)
  _โ_     : {tโ tโ tโ tโ : ๐} โ (tโ โท tโ) โ (tโ โท tโ) โ (tโ รแตค tโ โท tโ รแตค tโ)
  -- monad
  return : (T : ๐) โ T โท Singแตค T
  join : (T : ๐) โ Singแตค (Singแตค T) โท Singแตค T
  unjoin : (T : ๐) โ Singแตค T โท Singแตค (Singแตค T)
  tensorl : (Tโ Tโ : ๐) โ (Singแตค Tโ รแตค Tโ) โท Singแตค (Tโ รแตค Tโ)
  tensorr : (Tโ Tโ : ๐) โ (Tโ รแตค Singแตค Tโ) โท Singแตค (Tโ รแตค Tโ)
  tensor : (Tโ Tโ : ๐) โ (Singแตค Tโ รแตค Singแตค Tโ) โท Singแตค (Tโ รแตค Tโ)
  untensor : (Tโ Tโ : ๐) โ Singแตค (Tโ รแตค Tโ) โท (Singแตค Tโ รแตค Singแตค Tโ)
  plusl : (Tโ Tโ : ๐) โ (Singแตค Tโ +แตคโ Tโ) โท Singแตค (Tโ +แตคโ Tโ)
  plusr : (Tโ Tโ : ๐) โ (Tโ +แตคแตฃ Singแตค Tโ) โท Singแตค (Tโ +แตคแตฃ Tโ)
  -- comonad
  extract : (T : ๐) โ Singแตค T โท T
  cojoin : (T : ๐) โ Singแตค T โท Singแตค (Singแตค T)
  counjoin : (T : ๐) โ Singแตค (Singแตค T) โท Singแตค T
  cotensorl : (Tโ Tโ : ๐) โ Singแตค (Tโ รแตค Tโ) โท (Singแตค Tโ รแตค Tโ)
  cotensorr : (Tโ Tโ : ๐) โ Singแตค (Tโ รแตค Tโ) โท (Tโ รแตค Singแตค Tโ)
  coplusl : (Tโ Tโ : ๐) โ Singแตค (Tโ +แตคโ Tโ) โท (Singแตค Tโ +แตคโ Tโ)
  coplusr : (Tโ Tโ : ๐) โ Singแตค (Tโ +แตคแตฃ Tโ) โท (Tโ +แตคแตฃ Singแตค Tโ)
  -- both?
  Singแตค : (Tโ Tโ : ๐) โ (Tโ โท Tโ) โ (Singแตค Tโ โท Singแตค Tโ)
  -- eta/epsilon
  ฮท : (T : ๐) โ ๐ โท (Singแตค T รแตค Recipแตค T)
  ฮต : (T : ๐) โ (Singแตค T รแตค Recipแตค T) โท ๐

!_ : {tโ tโ : ๐} โ tโ โท tโ โ tโ โท tโ
! swapโโ = swapโโ
! swapโโ = swapโโ
! assoclโโ = assocrโโ
! assoclโโ = assocrโโ
! assoclโโ = assocrโโ
! assoclโโ = assocrโโ
! assoclโโ = assocrโโ
! assocrโโ = assoclโโ
! assocrโโ = assoclโโ
! assocrโโ = assoclโโ
! assocrโโ = assoclโโ
! assocrโโ = assoclโโ
! uniteโl = unitiโl
! unitiโl = uniteโl
! uniteโr = unitiโr
! unitiโr = uniteโr
! swapโ = swapโ
! assoclโ = assocrโ
! assocrโ = assoclโ
! distโ = factorโ
! distโ = factorโ
! factorโ = distโ
! factorโ = distโ
! distlโ = factorlโ
! distlโ = factorlโ
! factorlโ = distlโ
! factorlโ = distlโ
! idโท = idโท
! (c โ cโ) = (! cโ) โ (! c)
! (c โโ cโ) = (! c) โโ (! cโ)
! (c โโ cโ) = (! c) โโ (! cโ)
! (c โ cโ) = (! c) โ (! cโ)
! return T = extract T
! join T = return (Singแตค T)
! unjoin T = join T
! tensorl Tโ Tโ = cotensorl Tโ Tโ
! tensorr Tโ Tโ = cotensorr Tโ Tโ
! tensor Tโ Tโ = untensor Tโ Tโ
! untensor Tโ Tโ = tensor Tโ Tโ
! plusl Tโ Tโ = coplusl Tโ Tโ
! plusr Tโ Tโ = coplusr Tโ Tโ
! extract T = return T
! cojoin T = join T
! counjoin T = return (Singแตค T)
! cotensorl Tโ Tโ = tensorl Tโ Tโ
! cotensorr Tโ Tโ = tensorr Tโ Tโ
! coplusl Tโ Tโ = plusl Tโ Tโ
! coplusr Tโ Tโ = plusr Tโ Tโ
! Singแตค Tโ Tโ c = Singแตค Tโ Tโ (! c)
! ฮท T = ฮต T
! ฮต T = ฮท T
