{-# OPTIONS --without-K #-}

module Comonadic where

open import Data.Empty using (‚ä•)
open import Data.Unit using (‚ä§; tt)
open import Data.Nat using (‚Ñï)
open import Data.Integer as ‚Ñ§ using (‚Ñ§; +_; -[1+_]; ‚à£_‚à£)
open import Data.Rational
  using (‚Ñö; _/_; _+_; _*_; _‚â¢0)
  renaming (1/_ to recip)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product -- using (_√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Relation.Binary.Core using (IsEquivalence)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; refl; cong; cong‚ÇÇ; module ‚â°-Reasoning)
open import Category.Comonad

infix  30 _‚ü∑_
infixr 50 _‚óé_

------------------------------------------------------------------------------
-- Pi with fractionals comonad

record Pointed (A : Set) (v : A) : Set where
  constructor ‚áë
  field
    ‚óè : A
    v‚â°‚óè : v ‚â° ‚óè 

open Pointed

Recip : (A : Set) ‚Üí (v : A) ‚Üí Set
Recip A v = (w : A) ‚Üí (v ‚â° w) ‚Üí ‚ä§

--

data U : Set 
‚ü¶_‚üß : (A : U) ‚Üí Set
data _‚ü∑_ : U ‚Üí U ‚Üí Set 
eval : {A B : U} ‚Üí (A ‚ü∑ B) ‚Üí ‚ü¶ A ‚üß ‚Üí ‚ü¶ B ‚üß

data U where
  ZERO    : U
  ONE     : U
  PLUS    : U ‚Üí U ‚Üí U
  TIMES   : U ‚Üí U ‚Üí U
  POINTED : (A : U) ‚Üí {v : ‚ü¶ A ‚üß} ‚Üí U
  RECIP   : (A : U) ‚Üí {v : ‚ü¶ A ‚üß} ‚Üí U

‚ü¶ ZERO ‚üß = ‚ä• 
‚ü¶ ONE ‚üß = ‚ä§
‚ü¶ PLUS t‚ÇÅ t‚ÇÇ ‚üß = ‚ü¶ t‚ÇÅ ‚üß ‚äé ‚ü¶ t‚ÇÇ ‚üß
‚ü¶ TIMES t‚ÇÅ t‚ÇÇ ‚üß = ‚ü¶ t‚ÇÅ ‚üß √ó ‚ü¶ t‚ÇÇ ‚üß
‚ü¶ POINTED A {v} ‚üß = Pointed ‚ü¶ A ‚üß v
‚ü¶ RECIP A {v} ‚üß = Recip ‚ü¶ A ‚üß v

data _‚ü∑_ where
  unite‚Çäl : {t : U} ‚Üí PLUS ZERO t ‚ü∑ t
  uniti‚Çäl : {t : U} ‚Üí t ‚ü∑ PLUS ZERO t
  unite‚Çär : {t : U} ‚Üí PLUS t ZERO ‚ü∑ t
  uniti‚Çär : {t : U} ‚Üí t ‚ü∑ PLUS t ZERO
  swap‚Çä   : {t‚ÇÅ t‚ÇÇ : U} ‚Üí PLUS t‚ÇÅ t‚ÇÇ ‚ü∑ PLUS t‚ÇÇ t‚ÇÅ
  assocl‚Çä : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí PLUS t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ) ‚ü∑ PLUS (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  assocr‚Çä : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí PLUS (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ PLUS t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ)
  unite‚ãÜl  : {t : U} ‚Üí TIMES ONE t ‚ü∑ t
  uniti‚ãÜl  : {t : U} ‚Üí t ‚ü∑ TIMES ONE t
  unite‚ãÜr : {t : U} ‚Üí TIMES t ONE ‚ü∑ t
  uniti‚ãÜr : {t : U} ‚Üí t ‚ü∑ TIMES t ONE
  swap‚ãÜ   : {t‚ÇÅ t‚ÇÇ : U} ‚Üí TIMES t‚ÇÅ t‚ÇÇ ‚ü∑ TIMES t‚ÇÇ t‚ÇÅ
  assocl‚ãÜ : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí TIMES t‚ÇÅ (TIMES t‚ÇÇ t‚ÇÉ) ‚ü∑ TIMES (TIMES t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  assocr‚ãÜ : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí TIMES (TIMES t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ TIMES t‚ÇÅ (TIMES t‚ÇÇ t‚ÇÉ)
  absorbr : {t : U} ‚Üí TIMES ZERO t ‚ü∑ ZERO
  absorbl : {t : U} ‚Üí TIMES t ZERO ‚ü∑ ZERO
  factorzr : {t : U} ‚Üí ZERO ‚ü∑ TIMES t ZERO
  factorzl : {t : U} ‚Üí ZERO ‚ü∑ TIMES ZERO t
  dist    : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí 
            TIMES (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ ‚ü∑ PLUS (TIMES t‚ÇÅ t‚ÇÉ) (TIMES t‚ÇÇ t‚ÇÉ)
  factor  : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí 
            PLUS (TIMES t‚ÇÅ t‚ÇÉ) (TIMES t‚ÇÇ t‚ÇÉ) ‚ü∑ TIMES (PLUS t‚ÇÅ t‚ÇÇ) t‚ÇÉ
  distl   : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U } ‚Üí
            TIMES t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ) ‚ü∑ PLUS (TIMES t‚ÇÅ t‚ÇÇ) (TIMES t‚ÇÅ t‚ÇÉ)
  factorl : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U } ‚Üí
            PLUS (TIMES t‚ÇÅ t‚ÇÇ) (TIMES t‚ÇÅ t‚ÇÉ) ‚ü∑ TIMES t‚ÇÅ (PLUS t‚ÇÇ t‚ÇÉ)
  id‚ü∑    : {t : U} ‚Üí t ‚ü∑ t
  _‚óé_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ : U} ‚Üí (t‚ÇÅ ‚ü∑ t‚ÇÇ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÅ ‚ü∑ t‚ÇÉ)
  _‚äï_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U} ‚Üí 
            (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (PLUS t‚ÇÅ t‚ÇÇ ‚ü∑ PLUS t‚ÇÉ t‚ÇÑ)
  _‚äó_     : {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ : U} ‚Üí 
            (t‚ÇÅ ‚ü∑ t‚ÇÉ) ‚Üí (t‚ÇÇ ‚ü∑ t‚ÇÑ) ‚Üí (TIMES t‚ÇÅ t‚ÇÇ ‚ü∑ TIMES t‚ÇÉ t‚ÇÑ)
  -- comonad
  -- not informnation preserving; not reversible
  extract : {t : U} ‚Üí {v : ‚ü¶ t ‚üß} ‚Üí POINTED t {v} ‚ü∑ t
  extend : {t‚ÇÅ t‚ÇÇ : U} ‚Üí {v‚ÇÅ : ‚ü¶ t‚ÇÅ ‚üß} ‚Üí 
           (c : POINTED t‚ÇÅ {v‚ÇÅ} ‚ü∑ t‚ÇÇ) ‚Üí
           (POINTED t‚ÇÅ {v‚ÇÅ} ‚ü∑ POINTED t‚ÇÇ {eval c (‚áë v‚ÇÅ refl)})
  tensorl : {t‚ÇÅ t‚ÇÇ : U} {v‚ÇÅ : ‚ü¶ t‚ÇÅ ‚üß} {v‚ÇÇ : ‚ü¶ t‚ÇÇ ‚üß} ‚Üí
           POINTED (TIMES t‚ÇÅ t‚ÇÇ) {(v‚ÇÅ , v‚ÇÇ)} ‚ü∑
           TIMES (POINTED t‚ÇÅ {v‚ÇÅ}) (POINTED t‚ÇÇ {v‚ÇÇ})
  tensorr : {t‚ÇÅ t‚ÇÇ : U} {v‚ÇÅ : ‚ü¶ t‚ÇÅ ‚üß} {v‚ÇÇ : ‚ü¶ t‚ÇÇ ‚üß} ‚Üí
           TIMES (POINTED t‚ÇÅ {v‚ÇÅ}) (POINTED t‚ÇÇ {v‚ÇÇ}) ‚ü∑
           POINTED (TIMES t‚ÇÅ t‚ÇÇ) {(v‚ÇÅ , v‚ÇÇ)} 
           
  -- fractionals
  Œ∑ : {t : U} ‚Üí (v : ‚ü¶ t ‚üß) ‚Üí ONE ‚ü∑ TIMES (POINTED t {v}) (RECIP t {v})
  Œµ : {t : U} ‚Üí (v : ‚ü¶ t ‚üß) ‚Üí TIMES (POINTED t {v}) (RECIP t {v}) ‚ü∑ ONE

eval unite‚Çäl (inj‚ÇÇ v) = v 
eval uniti‚Çäl v  = inj‚ÇÇ v 
eval unite‚Çär (inj‚ÇÅ v) = v
eval uniti‚Çär v  = inj‚ÇÅ v 
eval swap‚Çä (inj‚ÇÅ v) = inj‚ÇÇ v
eval swap‚Çä (inj‚ÇÇ v) = inj‚ÇÅ v
eval assocl‚Çä (inj‚ÇÅ v) = inj‚ÇÅ (inj‚ÇÅ v)
eval assocl‚Çä (inj‚ÇÇ (inj‚ÇÅ v)) = inj‚ÇÅ (inj‚ÇÇ v) 
eval assocl‚Çä (inj‚ÇÇ (inj‚ÇÇ v)) = inj‚ÇÇ v
eval assocr‚Çä (inj‚ÇÅ (inj‚ÇÅ v)) = inj‚ÇÅ v
eval assocr‚Çä (inj‚ÇÅ (inj‚ÇÇ v)) = inj‚ÇÇ (inj‚ÇÅ v)
eval assocr‚Çä (inj‚ÇÇ v) = inj‚ÇÇ (inj‚ÇÇ v)
eval unite‚ãÜl (tt , v) = v
eval uniti‚ãÜl v = (tt , v)
eval unite‚ãÜr (v , tt) = v
eval uniti‚ãÜr v = (v , tt)
eval swap‚ãÜ (v‚ÇÅ , v‚ÇÇ)          = (v‚ÇÇ , v‚ÇÅ)
eval assocl‚ãÜ (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) = ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ)
eval assocr‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) = (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ))
eval absorbl () 
eval absorbr () 
eval factorzl () 
eval factorzr () 
eval dist (inj‚ÇÅ v‚ÇÅ , v‚ÇÉ) = inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ)
eval dist (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ) = inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)
eval factor (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ)) = (inj‚ÇÅ v‚ÇÅ , v‚ÇÉ)
eval factor (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)) = (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ)
eval distl (v , inj‚ÇÅ v‚ÇÅ) = inj‚ÇÅ (v , v‚ÇÅ)
eval distl (v , inj‚ÇÇ v‚ÇÇ) = inj‚ÇÇ (v , v‚ÇÇ) 
eval factorl (inj‚ÇÅ (v , v‚ÇÅ)) = (v , inj‚ÇÅ v‚ÇÅ)
eval factorl (inj‚ÇÇ (v , v‚ÇÇ)) = (v , inj‚ÇÇ v‚ÇÇ) 
eval id‚ü∑ v = v
eval (c‚ÇÅ ‚óé c‚ÇÇ) v = eval c‚ÇÇ (eval c‚ÇÅ v)
eval (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ v) = inj‚ÇÅ (eval c‚ÇÅ v)
eval (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ v) = inj‚ÇÇ (eval c‚ÇÇ v)
eval (c‚ÇÅ ‚äó c‚ÇÇ) (v‚ÇÅ , v‚ÇÇ) = (eval c‚ÇÅ v‚ÇÅ , eval c‚ÇÇ v‚ÇÇ)
eval extract p = ‚óè p
eval (extend {v‚ÇÅ = v‚ÇÅ} c) p with ‚óè p | v‚â°‚óè p
eval (extend {v‚ÇÅ = .v‚ÇÇ} c) p | v‚ÇÇ | refl = ‚áë (eval c (‚áë v‚ÇÇ refl)) refl
eval tensorl p with ‚óè p | v‚â°‚óè p
... | (v‚ÇÅ , v‚ÇÇ) | refl = ‚áë v‚ÇÅ refl , ‚áë v‚ÇÇ refl 
eval tensorr (p‚ÇÅ , p‚ÇÇ) with ‚óè p‚ÇÅ | v‚â°‚óè p‚ÇÅ | ‚óè p‚ÇÇ | v‚â°‚óè p‚ÇÇ
... | v‚ÇÅ | refl | v‚ÇÇ | refl = ‚áë (v‚ÇÅ , v‚ÇÇ) refl 
eval (Œ∑ v) tt = ‚áë v refl , Œª w v‚â°w ‚Üí tt
eval (Œµ v) (p , f) = f (‚óè p) (v‚â°‚óè p)

------------------------------------------------------------------------------

TWO : U
TWO = PLUS ONE ONE

ùüö : Set
ùüö = ‚ü¶ TWO ‚üß

#f #t : ùüö
#f = inj‚ÇÅ tt
#t = inj‚ÇÇ tt


zigzag : ‚àÄ b ‚Üí POINTED TWO {b} ‚ü∑ POINTED TWO {b}
zigzag b =
  (extend (extract ‚óé uniti‚ãÜl)) ‚óé       -- POINTED (ONE * TWO)
  tensorl ‚óé                            -- POINTED ONE * POINTED TWO
  ((extract ‚óé Œ∑ b) ‚äó id‚ü∑) ‚óé          -- (POINTED TWO * RECIP TWO) * POINTED TWO
  assocr‚ãÜ ‚óé                            -- POINTED TWO * (RECIP TWO * POINTED TWO)
  (id‚ü∑ ‚äó swap‚ãÜ) ‚óé                    -- POINTED TWO * (POINTED TWO * RECIP TWO)
  (id‚ü∑ ‚äó Œµ b) ‚óé                      -- POINTED TWO * ONE
  unite‚ãÜr 

------------------------------------------------------------------------------
